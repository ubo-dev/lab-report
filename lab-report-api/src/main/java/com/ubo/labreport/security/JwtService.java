package com.ubo.labreport.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JwtService {

    // secret key generated by online tool
    // secret key taken from application.yaml file

    @Value("${application.security.jwt.secret-key}")
    private String secretKey;

    @Value("${application.security.jwt.expiration}")
    private long jwtExpiration;

    @Value("${application.security.jwt.refresh-token.expiration}")
    private long refreshExpiration;


    /**
     * @param token jwt token to take username which is email
     * @return returns extracted username which is email
     */
    public String extractUserName(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    /**
     * a method to create token in case we want to use just user details to create token
     * @param userDetails userDetails that is coming from spring itself
     * @return returns generated JWT token
     */
    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }

    /**
     * method to create new JWT token to return as response
     * @param extraClaims will contain extra claims that we want to add
     * @param userDetails userDetails that is coming from spring itself
     * @return return generated JWT token, ready to use as response
     */
    public String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {
        return buildToken(extraClaims, userDetails, jwtExpiration);
    }

    public String generateRefreshToken(UserDetails userDetails) {
        return buildToken(new HashMap<>(), userDetails, refreshExpiration);
    }

    private String buildToken(Map<String, Object> extraClaims, UserDetails userDetails, long expiration) {
        return Jwts
                .builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                // setting username(email for our case)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                // created at
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                // setting expiration data for token (24 hours for now)
                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                // setting key with encoding algorithm
                .compact();
    }

    /**
     * a method to check if token belongs to user details
     * @param token JWT token
     * @param userDetails user details that we implemented to our user entity
     * @return true if token belongs to the user, otherwise returns false
     */
    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUserName(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    /**
     * a method to check if token expired or not
     * @param token JWT token
     * @return true if its expired, otherwise returns false
     */
    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    /**
     * a method to extract expiration from token
     * @param token JWT token
     * @return Date of token
     */
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    /**
     * @param token the jwt token that will be decoded
     * @param claimsResolver this param will be the method that we want to apply for token
     * @return Applies this function to the given argument.
     * Params:
     * t â€“ the function argument
     * Returns:
     * the function result
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Claims comes with jwt dependency that is added the pom.xml
     * @param token takes token to parse and build it
     * @return extracted claim
     */
    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * used to decode jwt token using decoder
     * for details of decoding you can check the class named Base64
     * @return returns decoded byte array
     */
    private Key getSignInKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
